r12 <- "GO:0120161: regulation of cold−induced thermogenesisGO:0006084: acetyl−CoA metabolic processGO:0090181: regulation of cholesterol metabolic processGO:0010675: regulation of cellular carbohydrate metabolic processGO:1902930: regulation of alcohol biosynthetic processGO:0016125: sterol metabolic process "
p12 <- str_extract_all(r12, "GO:(.*?):") %>% unlist() %>% substr(1, 10)
#13: chromatin organisation, gene silencing (repressed), gene expression (de-repressed)
r13 <- "GO:0045815: positive regulation of gene expression  GO:1905268: negative regulation of chromatin organizationGO:0031935: regulation of chromatin silencing GO:0060969: negative regulation of gene silencing "
p13 <- str_extract_all(r13, "GO:(.*?):") %>% unlist() %>% substr(1, 10)
term_clusters <- list(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
names(term_clusters) <- paste0("cluster", 1:13)
term_genes <- vector(mode = "list", length = length(term_clusters))
names(term_genes) <- names(term_clusters)
#>foreach cluster analysis####
for (i in 1:length(term_genes)) {
cl <- term_clusters[[i]]
df_t <- df[df$GO.ID %in% cl,]
top_genes <- df_t %>% group_by(group) %>% dplyr::count(genes, sort = T)
top_genes$symbol <- ensg2symbol$hgnc_symbol[match(top_genes$genes, ensg2symbol$ensembl_gene_id)]
top_genes$perc <- top_genes$n / length(cl)
term_genes[[i]] <- top_genes
}
term_genes
top_gene_df <- plyr::ldply(term_genes)
top_gene_df <- top_gene_df[order(top_gene_df$n, decreasing = T),]
nrow(top_gene_df)
head(top_gene_df, 100)
#account for different cluster sizes
#percent?
hist(top_gene_df$perc)
quantile(top_gene_df$perc, seq(0,1,.01))
table(top_gene_df$.id)
#>> per cluster to address size differences####
nrow(df)
cl_list <- lapply(df$GO.ID, function(id) which(unlist(lapply(term_clusters, function(x) any(grepl(id, x))))))
df$cluster <- lapply(cl_list, paste, collapse = ", ") %>% unlist()
df <- df %>% mutate(cluster = strsplit(as.character(cluster), ", ")) %>% unnest(cluster)
df$cluster <- paste0("cluster", df$cluster)
df <- df %>% mutate(ensg = genes) %>% dplyr::select(GO.ID, ensg, cluster) %>% distinct()
df$symbol <- ensg2symbol$hgnc_symbol[match(df$ensg, ensg2symbol$ensembl_gene_id)]
df_top <- df %>% group_by(cluster) %>% dplyr::count(ensg, sort = T) %>% ungroup()
df_top$pval <- NA
nrow(df[df$ensg == "ENSG00000007168" & df$cluster == "cluster4",])
nrow(df[df$ensg == "ENSG00000007168" & df$cluster != "cluster4",])
nrow(df[df$ensg != "ENSG00000007168" & df$cluster == "cluster4",])
nrow(df[df$ensg != "ENSG00000007168" & df$cluster != "cluster4",])
#PAFAH1B1         #gene in group    #gene not in group
# in cluster      19                1771
# in background   7                 11099
m <- matrix(c(19, 7, 1771, 11099), nrow = 2, ncol = 2)
fisher.test(m, alternative = "greater")
#loop over
for (i in 1:nrow(df_top)) {
m <- matrix(c(nrow(df[df$ensg == df_top$ensg[i] & df$cluster == df_top$cluster[i],]),
nrow(df[df$ensg == df_top$ensg[i] & df$cluster != df_top$cluster[i],]),
nrow(df[df$ensg != df_top$ensg[i] & df$cluster == df_top$cluster[i],]),
nrow(df[df$ensg != df_top$ensg[i] & df$cluster != df_top$cluster[i],])),
nrow = 2, ncol = 2)
t <- fisher.test(m, alternative = "greater")
df_top$pval[i] <- t$p.value
}
df_top$symbol <- ensg2symbol$hgnc_symbol[match(df_top$ensg, ensg2symbol$ensembl_gene_id)]
df_top <- df_top[order(df_top$n, decreasing = T), ]
mean(df_top$pval<.05)
mean(df_top$pval<.001)
# reorder columns
df_top <- df_top %>% dplyr::select(ensg, symbol, everything())
#adjust pval
df_top$padj <- p.adjust(df_top$pval, method = "BH")
df_top$de_padj <- de_genes$padj[match(df_top$ensg, de_genes$ensg)]
df_top$de_baseMean <- de_genes$baseMean[match(df_top$ensg, de_genes$ensg)]
df_top$de_logFC <- de_genes$log2FoldChange[match(df_top$ensg, de_genes$ensg)]
df_top$de_countChange <- de_genes$countChange[match(df_top$ensg, de_genes$ensg)]
#>>>write out####
write.csv(df_top, file = "out/mir_targets_go_cluster_enrichment.csv", quote = F, row.names = F)
mean(df_top$padj<.05)
mean(df_top$padj<.001)
df_top_05 <- data.frame(df_top[df_top$padj<.05, ])
mean(top_gene_df$symbol %in% df_top$symbol) #results very similar
nrow(df_top_05)
df_top_05$cluster <- gsub("cluster", "", df_top_05$cluster)
cl_count <- dplyr::count(df_top_05, cluster, wt = n(), sort = T) #wt = n() or else it weighs by n column
df_top_05$cluster <- factor(df_top_05$cluster, levels = rev(cl_count$cluster))
ggplot(df_top_05, aes(cluster)) + geom_bar() + coord_flip() +
theme_minimal()
ggsave("img/mir_target_go_enriched_genes_per_cluster.pdf", width = 5, height = 7)
df_top_cl6 <- df_top_05 %>% filter(cluster == "cluster6")
df_top_cl6[which(df_top_cl6$de_padj<.1),] #10 below .1
df_top_cl6
df_top_05
df_top_cl6 <- df_top_05 %>% filter(cluster == "6")
df_top_cl6[which(df_top_cl6$de_padj<.1),] #10 below .1
cl_count
pacman::p_load(RNeo4j, BiocParallel, gsoap, RColorBrewer, ggplot2, tidyverse, janitor, car)
Anova(log10(mir_count_neg$n) ~ log10(mir_count_pos$n))
?Anova
mir_count
OneWayAnova <- function(data, dv, iv, conf = 0.95){
alpha = 1 - conf
ndigits = 10
df <- data
# empty result object
r <- {}
dfFormula <- as.formula(paste(dv, iv, sep=" ~ "))
df.res <- lm(dfFormula, data = df)
r$aov <- do.call(rbind.data.frame, summary(aov(df.res)))
r$aov <- cbind(Source=rownames(r$aov), r$aov)
suppressWarnings(suppressMessages(library(lsmeans)))
t<- suppressMessages(pairs(lsmeans(df.res, iv)))
ts <- summary(t)
tc <- confint(t, level = conf)
r$t <- merge(ts, tc)
r$s <- aggregate(formula=dfFormula,
data=df,
FUN=ShapiroTest)
return(r)
}
pacman::p_load(RNeo4j, BiocParallel, gsoap, RColorBrewer, ggplot2, tidyverse, janitor, car, lsmeans)
colnames(mir_count)
OneWayAnova(mir_count, dv = "n", iv = "group")
ShapiroTest <- function(x){
z <- length(x)
if(z > 2 && z < 5001){
y <- shapiro.test(x)
return (c(w=unname(y$statistic), p=y$p.value, n=z))
}
return (c(w=NA, p=NA, n=z))
}
OneWayAnova(mir_count, dv = "n", iv = "group")
mir_count$nlog <- log10(mir_count$n)
OneWayAnova(mir_count, dv = "nlog", iv = "group")
df_top_cl6
df
# --- MANUAL ANALYSIS OF GO TERM CLUSTERS IN PDF OUTPUT ####
df <- readRDS(file = "data/go_terms_mir_targets_pos_and_neg.rds")
# FURTHER ANALYSIS OF MANUAL CLUSTERS - COMMON GENES? ####
head(df)
#melt gene ensgs
df <- df %>% mutate(genes = strsplit(as.character(genes), "/")) %>% unnest(genes)
df %>% group_by(group) %>% dplyr::count(genes, sort = T) #top genes per group overall
# FURTHER ANALYSIS OF MANUAL CLUSTERS - COMMON GENES? ####
head(df)
df[grep("GO:0036293", df$GO.ID),]
df[grep("GO:0042493", df$GO.ID),]
df[grep("GO:0071236", df$GO.ID),]
df[grep("GO:0051384", df$GO.ID),]
df[grep("GO:0046683", df$GO.ID),]
cl_count
df_top_cl8 <- df_top_05 %>% filter(cluster == "8")
df_top_cl8[which(df_top_cl8$de_padj<.1),] #10 below .1
df_top_cl8[which(df_top_cl8$de_padj<.01),] #2 below .01
write.table(df_top_cl8$ensg, file = "out/mir_targets_go_cluster8.txt", sep = "\n", row.names = F, quote = F)
df[grep("GO:0098901", df$GO.ID),]
df[grep("GO:1903523", df$GO.ID),]
sessionInfo()
df_top_cl6[which(df_top_cl6$de_padj<.1),] #10 below .1
de_smrna
de_smrna[order(abs(de_smrna$countChange)),]
de_smrna[order(abs(de_smrna$countChange), decreasing = T),]
setwd("~/Genomics/190304_stroke")
dir <- "alignment/raw/quants"
samples <- list.files(dir)
dir <- "alignment/human/quants"
samples <- list.files(dir)
files <- file.path(dir, samples, "quant.sf")
names(files) <- gsub("_quant", "", samples)
library(tximport)
#Original patient data alignment####
library(EnsDb.Hsapiens.v86)
setwd("~/GitHub/stroke-trf")
rm(list = ls())
pacman::p_load(pheatmap,
fitdistrplus,
DESeq2,
ggplot2,
Rtsne,
RColorBrewer,
ggrepel)
options(stringsAsFactors = FALSE);
#Read in
meta <- read.csv("data/raw/juzenas_sample_meta.csv", sep = ",", row.names = 1)
meta$cells <- factor(meta$cells)
head(meta)
rownames(meta) <- meta$file
meta$batch <- factor(meta$batch)
counts <- read.csv("data/raw/miRNA_reads_miRExpress_juzenas.csv", sep = ",", row.names = 1)
head(counts)
nrow(counts)
mean(rowMeans(counts) == 0)
mean(colMeans(counts) == 0)
counts <- counts[,colMeans(counts) != 0]
meta <- meta[match(colnames(counts), meta$file),]
#deseq normalize VST
se <- SummarizedExperiment(as.matrix(counts),
colData = meta)
dds <- DESeqDataSet(se, design = ~ cells)
cts <- counts(dds)
geoMeans <- apply(cts, 1, function(row) if (all(row == 0)) 0 else exp(sum(log(row[row != 0]))/length(row)))
dds <- estimateSizeFactors(dds, geoMeans=geoMeans)
#FORMALIZE THE DEFINITION OF PRESENCE/ABSENCE####
#collect counts per cell type in a list
if(!file.exists("data/counts_per_cell_list_mir.rds")){
dis <- vector(mode = "list", length = nrow(cts))
names(dis) <- rownames(cts)
for (mir in rownames(counts)) {
row <- counts[mir,]
expr <- logical()
lis <- vector(mode = "list", length = length(unique(meta$cells)))
names(lis) <- unique(meta$cells)
for (cell in unique(meta$cells)) {
lis[[cell]] <- as.numeric(row[meta$file[meta$cells == cell]])
}
dis[[mir]] <- lis
}
saveRDS(dis, "data/counts_per_cell_list_mir.rds")
} else {
dis <- readRDS("data/counts_per_cell_list_mir.rds")
}
#>implement statistical test####
cell_types <- levels(meta$cells)
#kolmogorov-smirnov over log-normal distribution of counts with estimated mean and sd
if(!file.exists("data/pvals_per_cell_ks_list_mir.rds")){
pvals <- vector(mode = "list", length = length(dis))
names(pvals) <- names(dis)
for(mir in names(dis)) {
p.temp <- vector(mode = "numeric", length = length(cell_types))
names(p.temp) <- cell_types
for (cell in cell_types) {
dist <- dis[[mir]][[cell]]
if (!mean(dist) == 0) {
est <- fitdist((dist + 1), "lnorm", method = "mle")
test <- ks.test(dist,
rlnorm(
n = length(dist),
meanlog = est$estimate[1],
sdlog = est$estimate[2]
))
p.temp[cell] <- test$p.value
} else {
p.temp[cell] <- 0
}
}
pvals[[mir]] <- p.temp
pos <- which(names(dis) == mir)
if (pos %% 1000 == 1)
message(pos)
}
saveRDS(pvals, "data/pvals_per_cell_ks_list_mir.rds")
} else {
pvals <- readRDS("data/pvals_per_cell_ks_list_mir.rds")
}
pvals_df <- plyr::ldply(pvals)
rownames(pvals_df) <- pvals_df$.id
pvals_df$.id <- NULL
head(pvals_df)
pvals_df_bin <- data.frame(apply(pvals_df, 2, function(x) x>=.01)) #presence absence defined by ks test pvalue threshold
head(pvals_df_bin)
#>>intra vs. extracellular####
sum(apply(pvals_df_bin[, c("exosomes", "serum")], 1, any))
sum(apply(pvals_df_bin[, grep("cell", colnames(pvals_df_bin))], 1, any))
#>>intra vs. extracellular####
sum(pvals_df_bin$whole.blood)
setwd("~/Genomics/190304_stroke")
rm(list = ls())
library(tximport)
#Original patient data alignment####
library(EnsDb.Hsapiens.v86)
txdf <- transcripts(EnsDb.Hsapiens.v86, return.type="DataFrame")
tx2gene <- as.data.frame(txdf[,c("tx_id","gene_id")])
head(tx2gene)
dir <- "alignment/human/quants"
samples <- list.files(dir)
files <- file.path(dir, samples, "quant.sf")
names(files) <- gsub("_quant", "", samples)
txi.salmon <- tximport(files, type = "salmon", tx2gene = tx2gene)
names(txi.salmon)
head(txi.salmon$counts)
dim(txi.salmon$counts)
#metrics
samples <- colSums(txi.salmon$counts)
samples
sum(samples)
mean(samples)
sd(samples)
con <- samples[grep("Control", names(samples))]
stroke <- samples[-grep("Control", names(samples))]
con
total_counts_df <- data.frame(samples)
total_counts_df
total_counts_df$group <- factor(grepl("Control", rownames(total_counts_df)))
levels(total_counts_df$group) <- c("Case", "Control")
total_counts_df
ggplot(total_counts_df, aes(total_counts, fill = group)) + geom_histogram(col = "black", alpha = .3, bins = 20) +
xlim(0, 2e7)
ggplot(total_counts_df, aes(samples, fill = group)) + geom_histogram(col = "black", alpha = .3, bins = 20) +
xlim(0, 2e7)
ggplot(total_counts_df, aes(samples, fill = group)) + geom_histogram(col = "black", alpha = .3, bins = 20)
ggplot(total_counts_df, aes(samples, fill = group)) + geom_histogram(col = "black", alpha = .3, bins = 15)
ggplot(total_counts_df, aes(samples, fill = group)) + geom_histogram(col = "black", alpha = .3, bins = 12)
ggsave("img/counts_case_vs_control_long.pdf")
#mapping rate
files <- file.path(dir, samples, "logs/salmon_quant.log")
files
lapply(files, read.table, nrows = 6)
#mapping rate
dir <- "alignment/human/quants"
samples <- list.files(dir)
files <- file.path(dir, samples, "logs/salmon_quant.log")
lapply(files, read.table, nrows = 6)
lapply(files, read.table, nrows = 6, fill = T)
lapply(files, read.table, nrows = 6, fill = T, sep = "\n")
logs_raw <- lapply(files, read.table, nrows = Inf, fill = T, sep = "\n")
logs_raw
lapply(logs_raw, function(x) x[grep("Mapping", x$V1),])
lapply(logs_raw, function(x) x[grep("Mapping rate", x$V1),])
logs <- lapply(logs_raw, function(x) x[grep("Mapping rate", x$V1),]) %>% unlist()
logs
logs %>% strsplit(" = ")
logs %>% strsplit(" = ") %>% lapply("[", 2)
logs %>% strsplit(" = ") %>% lapply("[", 2) %>% unlist()
logs %>% strsplit(" = ") %>% lapply("[", 2) %>% unlist() %>% gsub("%", "")
logs %>% strsplit(" = ") %>% lapply("[", 2) %>% unlist() %>% gsub("%", "", .)
logs %>% strsplit(" = ") %>% lapply("[", 2) %>% unlist() %>% gsub("%", "", .) %>% as.numeric()
mapping <- logs %>% strsplit(" = ") %>% lapply("[", 2) %>% unlist() %>% gsub("%", "", .) %>% as.numeric()
mean(mapping)
sd(mapping)
setwd("~/GitHub/stroke-trf")
rm(list = ls())
pacman::p_load(
tidyverse,
pheatmap,
fitdistrplus,
DESeq2,
ggplot2,
Rtsne,
RColorBrewer,
ggrepel
)
options(stringsAsFactors = FALSE);
#Read in
meta <- read.csv("data/raw/juzenas_sample_meta.csv", sep = ",", row.names = 1)
meta$cells <- factor(meta$cells)
head(meta)
rownames(meta) <- meta$file
meta$batch <- factor(meta$batch)
counts <- read.csv("data/raw/juzenas_trna_exclusive_combined_data.csv", sep = ",", row.names = 1)
head(counts)
nrow(counts)
mean(rowMeans(counts) == 0)
mean(colMeans(counts) == 0)
counts <- counts[,colMeans(counts) != 0]
meta <- meta[match(colnames(counts), meta$file),]
#deseq normalize VST
se <- SummarizedExperiment(as.matrix(counts),
colData = meta)
dds <- DESeqDataSet(se, design = ~ cells)
cts <- counts(dds)
geoMeans <- apply(cts, 1, function(row) if (all(row == 0)) 0 else exp(sum(log(row[row != 0]))/length(row)))
dds <- estimateSizeFactors(dds, geoMeans=geoMeans)
#FORMALIZE THE DEFINITION OF PRESENCE/ABSENCE####
#collect counts per cell type in a list
if(!file.exists("data/counts_per_cell_list.rds")){
dis <- vector(mode = "list", length = nrow(cts))
names(dis) <- rownames(cts)
for (trf in rownames(counts)) {
row <- counts[trf,]
expr <- logical()
lis <- vector(mode = "list", length = length(unique(meta$cells)))
names(lis) <- unique(meta$cells)
for (cell in unique(meta$cells)) {
lis[[cell]] <- as.numeric(row[meta$file[meta$cells == cell]])
}
dis[[trf]] <- lis
}
saveRDS(dis, "data/counts_per_cell_list.rds")
} else {
dis <- readRDS("data/counts_per_cell_list.rds")
}
#>implement statistical test####
cell_types <- levels(meta$cells)
#kolmogorov-smirnov over log-normal distribution of counts with estimated mean and sd
if(!file.exists("data/pvals_per_cell_ks_list.rds")){
pvals <- vector(mode = "list", length = length(dis))
names(pvals) <- names(dis)
for(trf in names(dis)) {
p.temp <- vector(mode = "numeric", length = length(cell_types))
names(p.temp) <- cell_types
for (cell in cell_types) {
dist <- dis[[trf]][[cell]]
if (!mean(dist) == 0) {
est <- fitdist((dist + 1), "lnorm", method = "mle")
test <- ks.test(dist,
rlnorm(
n = length(dist),
meanlog = est$estimate[1],
sdlog = est$estimate[2]
))
p.temp[cell] <- test$p.value
} else {
p.temp[cell] <- 0
}
}
pvals[[trf]] <- p.temp
pos <- which(names(dis) == trf)
if (pos %% 1000 == 1)
message(pos)
}
saveRDS(pvals, "data/pvals_per_cell_ks_list.rds")
} else {
pvals <- readRDS("data/pvals_per_cell_ks_list.rds")
}
pvals_df <- plyr::ldply(pvals)
rownames(pvals_df) <- pvals_df$.id
pvals_df$.id <- NULL
head(pvals_df)
pvals_df_bin <- data.frame(apply(pvals_df, 2, function(x) x>=.01)) #presence absence defined by ks test pvalue threshold
head(pvals_df_bin)
nrow(pvals_df_bin)
#>>intra vs. extracellular####
sum(pvals_df_bin$whole.blood)
sum(apply(pvals_df_bin[, c("exosomes", "serum")], 1, any))
sum(apply(pvals_df_bin[, grep("cell", colnames(pvals_df_bin))], 1, any))
sum(pvals_df_bin$CD14.cells)
setwd("~/GitHub/stroke-trf")
rm(list = ls())
pacman::p_load(pheatmap,
fitdistrplus,
DESeq2,
ggplot2,
Rtsne,
RColorBrewer,
ggrepel)
options(stringsAsFactors = FALSE);
#Read in
meta <- read.csv("data/raw/juzenas_sample_meta.csv", sep = ",", row.names = 1)
meta$cells <- factor(meta$cells)
head(meta)
rownames(meta) <- meta$file
meta$batch <- factor(meta$batch)
counts <- read.csv("data/raw/miRNA_reads_miRExpress_juzenas.csv", sep = ",", row.names = 1)
head(counts)
nrow(counts)
mean(rowMeans(counts) == 0)
mean(colMeans(counts) == 0)
counts <- counts[,colMeans(counts) != 0]
meta <- meta[match(colnames(counts), meta$file),]
#deseq normalize VST
se <- SummarizedExperiment(as.matrix(counts),
colData = meta)
dds <- DESeqDataSet(se, design = ~ cells)
cts <- counts(dds)
geoMeans <- apply(cts, 1, function(row) if (all(row == 0)) 0 else exp(sum(log(row[row != 0]))/length(row)))
dds <- estimateSizeFactors(dds, geoMeans=geoMeans)
#FORMALIZE THE DEFINITION OF PRESENCE/ABSENCE####
#collect counts per cell type in a list
if(!file.exists("data/counts_per_cell_list_mir.rds")){
dis <- vector(mode = "list", length = nrow(cts))
names(dis) <- rownames(cts)
for (mir in rownames(counts)) {
row <- counts[mir,]
expr <- logical()
lis <- vector(mode = "list", length = length(unique(meta$cells)))
names(lis) <- unique(meta$cells)
for (cell in unique(meta$cells)) {
lis[[cell]] <- as.numeric(row[meta$file[meta$cells == cell]])
}
dis[[mir]] <- lis
}
saveRDS(dis, "data/counts_per_cell_list_mir.rds")
} else {
dis <- readRDS("data/counts_per_cell_list_mir.rds")
}
#>implement statistical test####
cell_types <- levels(meta$cells)
#kolmogorov-smirnov over log-normal distribution of counts with estimated mean and sd
if(!file.exists("data/pvals_per_cell_ks_list_mir.rds")){
pvals <- vector(mode = "list", length = length(dis))
names(pvals) <- names(dis)
for(mir in names(dis)) {
p.temp <- vector(mode = "numeric", length = length(cell_types))
names(p.temp) <- cell_types
for (cell in cell_types) {
dist <- dis[[mir]][[cell]]
if (!mean(dist) == 0) {
est <- fitdist((dist + 1), "lnorm", method = "mle")
test <- ks.test(dist,
rlnorm(
n = length(dist),
meanlog = est$estimate[1],
sdlog = est$estimate[2]
))
p.temp[cell] <- test$p.value
} else {
p.temp[cell] <- 0
}
}
pvals[[mir]] <- p.temp
pos <- which(names(dis) == mir)
if (pos %% 1000 == 1)
message(pos)
}
saveRDS(pvals, "data/pvals_per_cell_ks_list_mir.rds")
} else {
pvals <- readRDS("data/pvals_per_cell_ks_list_mir.rds")
}
pvals_df <- plyr::ldply(pvals)
rownames(pvals_df) <- pvals_df$.id
pvals_df$.id <- NULL
head(pvals_df)
pvals_df_bin <- data.frame(apply(pvals_df, 2, function(x) x>=.01)) #presence absence defined by ks test pvalue threshold
head(pvals_df_bin)
#>>intra vs. extracellular####
sum(pvals_df_bin$whole.blood)
sum(apply(pvals_df_bin[, c("exosomes", "serum")], 1, any))
sum(apply(pvals_df_bin[, grep("cell", colnames(pvals_df_bin))], 1, any))
sum(pvals_df_bin$CD14.cells)
