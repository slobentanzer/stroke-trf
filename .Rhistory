genes <- stroke[order(stroke$padj < .05, abs(stroke$countChange), decreasing = T),]
num_de <- sum(genes$padj<.05)
top <- 100
ontology <- "BP"
description <- "top genes DE in stroke"
allGenes <- abs(genes$countChange)[1:2000]
names(allGenes) <- genes$ensg[1:2000]
allGenes[(top+1):2000] <- 1
hist(allGenes)
quantile(allGenes, seq(0,1,.01))
topGenes <- function(allScore) {
return(allScore > 1)
}
nodeSize <- 10
GOdata <- new("topGOdata",
description = description,
ontology = ontology,
allGenes = allGenes,
geneSel = topGenes,
annot = annFUN.gene2GO,
nodeSize = nodeSize,
gene2GO = geneID2GO)
test.stat <- new("classicCount", testStatistic = GOFisherTest, name = "Fisher test")
resultFisher <- getSigGroups(GOdata, test.stat)
resultFisher
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
allRes <- GenTable(GOdata, classic = resultFisher,
weight = resultWeight,
orderBy = "weight", ranksOf = "classic", topNodes = 100)
(sig <- allRes[allRes$weight<.05,])
write.csv(sig, file = "out/gene_GO_top_100_abs.csv")
setwd("~/GitHub/stroke-trf")
rm(list = ls())
library(pheatmap)
library(fitdistrplus)
library(DESeq2)
library(ggplot2)
library(Rtsne)
library(RColorBrewer)
library(ggrepel)
options(stringsAsFactors = FALSE);
meta <- read.csv("data/raw/juzenas_sample_meta.csv", sep = ",", row.names = 1)
meta$cells <- factor(meta$cells)
head(meta)
rownames(meta) <- meta$file
meta$batch <- factor(meta$batch)
counts <- read.csv("data/raw/juzenas_trna_exclusive_combined_data.csv", sep = ",", row.names = 1)
head(counts)
nrow(counts)
mean(rowMeans(counts) == 0)
mean(colMeans(counts) == 0)
counts <- counts[,colMeans(counts) != 0]
meta <- meta[match(colnames(counts), meta$file),]
se <- SummarizedExperiment(as.matrix(counts),
colData = meta)
dds <- DESeqDataSet(se, design = ~ cells)
cts <- counts(dds)
geoMeans <- apply(cts, 1, function(row) if (all(row == 0)) 0 else exp(sum(log(row[row != 0]))/length(row)))
dds <- estimateSizeFactors(dds, geoMeans=geoMeans)
if(!file.exists("data/counts_per_cell_list.rds")){
dis <- vector(mode = "list", length = nrow(cts))
names(dis) <- rownames(cts)
for (trf in rownames(counts)) {
row <- counts[trf,]
expr <- logical()
lis <- vector(mode = "list", length = length(unique(meta$cells)))
names(lis) <- unique(meta$cells)
for (cell in unique(meta$cells)) {
lis[[cell]] <- as.numeric(row[meta$file[meta$cells == cell]])
}
dis[[trf]] <- lis
}
saveRDS(dis, "data/counts_per_cell_list.rds")
} else {
dis <- readRDS("data/counts_per_cell_list.rds")
}
cell_types <- levels(meta$cells)
if(!file.exists("data/pvals_per_cell_ks_list.rds")){
pvals <- vector(mode = "list", length = length(dis))
names(pvals) <- names(dis)
for(trf in names(dis)) {
p.temp <- vector(mode = "numeric", length = length(cell_types))
names(p.temp) <- cell_types
for (cell in cell_types) {
dist <- dis[[trf]][[cell]]
if (!mean(dist) == 0) {
est <- fitdist((dist + 1), "lnorm", method = "mle")
test <- ks.test(dist,
rlnorm(
n = length(dist),
meanlog = est$estimate[1],
sdlog = est$estimate[2]
))
p.temp[cell] <- test$p.value
} else {
p.temp[cell] <- 0
}
}
pvals[[trf]] <- p.temp
pos <- which(names(dis) == trf)
if (pos %% 1000 == 1)
message(pos)
}
saveRDS(pvals, "data/pvals_per_cell_ks_list.rds")
} else {
pvals <- readRDS("data/pvals_per_cell_ks_list.rds")
}
pvals_df <- plyr::ldply(pvals)
rownames(pvals_df) <- pvals_df$.id
pvals_df$.id <- NULL
head(pvals_df)
pvals_df_bin <- data.frame(apply(pvals_df, 2, function(x) x>=.01)) #presence absence defined by ks test pvalue threshold
head(pvals_df_bin)
nrow(pvals_df_bin)
dat <- plotCounts(dds, "tRF-18-HR0VX6D2", intgroup = "cells", returnData = T)
dat$cells <- gsub(" ", ".", dat$cells, fixed = T)
cd14 <- dat[dat$cells == "CD14.cells",]
dist <- cd14$count
est <- fitdist((dist + 1), "lnorm", method = "mle")
test <- ks.test(dist,
rlnorm(
n = length(dist),
meanlog = est$estimate[1],
sdlog = est$estimate[2]
))
ggplot(cd14) + geom_histogram(bins = 21, aes(x = count, y = ..density..), color = "grey") +
stat_function(fun = dlnorm, args = list(meanlog = est$estimate[1], sdlog = est$estimate[2]),
colour = "red") +
theme_light()
ggsave("img/presence_hr0v_cd14.svg")
ery <- dat[dat$cells == "CD235a.cells",]
dist <- ery$count
est <- fitdist((dist + 1), "lnorm", method = "mle")
test <- ks.test(dist,
rlnorm(
n = length(dist),
meanlog = est$estimate[1],
sdlog = est$estimate[2]
))
pwr <- function(x) (.15*x^-.6)
ggplot(ery) + geom_histogram(bins = 22,
aes(x = count, y = ..density..), color = "grey") +
stat_function(fun = dlnorm, args = list(meanlog = est$estimate[1], sdlog = est$estimate[2]),
colour = "red") +
stat_function(fun = pwr, colour = "green") +
theme_light()
ggsave("img/absence_hr0v_ery.svg")
pvals_df_num <- data.frame(apply(pvals_df_bin, 2, as.numeric))
rownames(pvals_df_num) <- rownames(pvals_df_bin)
cell_types
cell_types.name <- c("monocyte", "neutrophil", "B-cell", "erythrocyte", "T-helper",
"NK-cell", "T-toxic", "exosome", "serum", "whole.blood")
colnames(pvals_df_num) <- cell_types.name
mean(rowMeans(pvals_df_num)==0)
pvals_df_num <- pvals_df_num[rowMeans(pvals_df_num) != 0,]
dim(pvals_df_num)
set.seed(1234)
method <- "ward.D2"
n <- 8
dev.off()
p <- pheatmap(
as.matrix(pvals_df_num),
color = colorRampPalette(brewer.pal(n = 3, name = "RdYlBu"))(2),
clustering_method = method,
legend = F,
show_rownames = F,
cutree_rows = n,
# filename = paste0("img/heatmaps/", method, "-", n, ".pdf"),
main = paste0(method, "-", n)
)
clust <- data.frame(cutree(as.hclust(p$tree_row), n))
colnames(clust) <- "cluster"
clust$cluster <- factor(clust$cluster)
clust0 <- clust
clust0$name <- rownames(clust0)
write.csv(clust0[, c("name", "cluster")], "out/tRF_cluster_table.csv", row.names = F)
pheatmap(as.matrix(pvals_df_num),
color = colorRampPalette(brewer.pal(n = 3, name = "RdYlBu"))(2),
annotation_colors = list(brewer.pal(n, "Dark2")),
clustering_method = method,
legend = T,
show_rownames = F,
annotation_row = clust,
cutree_rows = n)
levels(clust$cluster) <- c("mono-NK", "ubi", "immune-minus-CD8", "immune", "blood-B", "immune-minus-B", "mono", "B-T")
pheatmap(as.matrix(pvals_df_num),
color = colorRampPalette(brewer.pal(n = 3, name = "RdYlBu"))(2),
annotation_colors = list(brewer.pal(n, "Dark2")),
clustering_method = method,
legend = T,
show_rownames = F,
annotation_row = clust,
cutree_rows = n,
filename = "img/trf_heatmap_cell_type.pdf"); dev.off()
deseq <- read.csv("out/DESeq2_smrna_stroke_vs_con.csv")
tsne_trf <- Rtsne(as.matrix(pvals_df_num), check_duplicates = F, perplexity = 50)
tsne_trf_plot <- data.frame(tsne_trf$Y)
colnames(tsne_trf_plot) <- c("x", "y")
rownames(tsne_trf_plot) <- rownames(pvals_df_num)
tsne_trf_plot$shape <- factor(rownames(tsne_trf_plot) %in% deseq$name)
tsne_trf_plot$countChange <- deseq$countChange[match(rownames(tsne_trf_plot), deseq$name)]
col <- clust$cluster[match(rownames(pvals_df_num), rownames(clust))]
tsne_trf_plot$ward.D2_8 <- factor(col)
ggplot(tsne_trf_plot, aes(x, y, col = ward.D2_8)) + geom_point(size = 1) +
scale_color_brewer(palette = "Dark2") + theme_minimal()
ggsave("img/tsne_trf.svg", width = 8, height = 5)
ggplot(tsne_trf_plot, aes(x, y)) + geom_point(size = 1, col = "grey80") +
theme_minimal() +
geom_point(aes(x, y, col = ward.D2_8, size = countChange), data =
tsne_trf_plot[tsne_trf_plot$shape == T,]) +
scale_color_brewer(palette = "Dark2") +
scale_size_continuous(breaks = c(10, 30, 100, 300, 1000, 3000))
ggsave("img/tsne_trf_DE.svg", width = 8, height = 5)
trf_counts <- read.csv("out/cholinotrf_counts.csv")
tsne_trf_plot$name <- rownames(tsne_trf_plot)
ggplot(tsne_trf_plot, aes(x, y)) + geom_point(size = 1, col = "grey80") +
theme_minimal() +
geom_point(aes(x, y, col = ward.D2_8, size = countChange), data =
tsne_trf_plot[rownames(tsne_trf_plot) %in% trf_counts$MINTplate[trf_counts$n>4],]) +
geom_text_repel(aes(x, y, label = name, size = countChange), data = tsne_trf_plot[rownames(tsne_trf_plot) %in% trf_counts$MINTplate[trf_counts$n>4],]) +
scale_color_brewer(palette = "Dark2") +
scale_size_continuous(breaks = c(10, 30, 100, 300, 1000, 3000))
ggsave("img/tsne_trf_cholino.svg", width = 8, height = 5)
setwd("~/GitHub/stroke-trf")
rm(list = ls())
library(pheatmap)
library(fitdistrplus)
library(DESeq2)
library(ggplot2)
library(Rtsne)
library(RColorBrewer)
library(ggrepel)
options(stringsAsFactors = FALSE);
meta <- read.csv("data/raw/juzenas_sample_meta.csv", sep = ",", row.names = 1)
meta$cells <- factor(meta$cells)
head(meta)
rownames(meta) <- meta$file
meta$batch <- factor(meta$batch)
counts <- read.csv("data/raw/miRNA_reads_miRExpress_juzenas.csv", sep = ",", row.names = 1)
head(counts)
nrow(counts)
mean(rowMeans(counts) == 0)
mean(colMeans(counts) == 0)
counts <- counts[,colMeans(counts) != 0]
meta <- meta[match(colnames(counts), meta$file),]
se <- SummarizedExperiment(as.matrix(counts),
colData = meta)
dds <- DESeqDataSet(se, design = ~ cells)
cts <- counts(dds)
geoMeans <- apply(cts, 1, function(row) if (all(row == 0)) 0 else exp(sum(log(row[row != 0]))/length(row)))
dds <- estimateSizeFactors(dds, geoMeans=geoMeans)
if(!file.exists("data/counts_per_cell_list_mir.rds")){
dis <- vector(mode = "list", length = nrow(cts))
names(dis) <- rownames(cts)
for (mir in rownames(counts)) {
row <- counts[mir,]
expr <- logical()
lis <- vector(mode = "list", length = length(unique(meta$cells)))
names(lis) <- unique(meta$cells)
for (cell in unique(meta$cells)) {
lis[[cell]] <- as.numeric(row[meta$file[meta$cells == cell]])
}
dis[[mir]] <- lis
}
saveRDS(dis, "data/counts_per_cell_list_mir.rds")
} else {
dis <- readRDS("data/counts_per_cell_list_mir.rds")
}
cell_types <- levels(meta$cells)
if(!file.exists("data/pvals_per_cell_ks_list_mir.rds")){
pvals <- vector(mode = "list", length = length(dis))
names(pvals) <- names(dis)
for(mir in names(dis)) {
p.temp <- vector(mode = "numeric", length = length(cell_types))
names(p.temp) <- cell_types
for (cell in cell_types) {
dist <- dis[[mir]][[cell]]
if (!mean(dist) == 0) {
est <- fitdist((dist + 1), "lnorm", method = "mle")
test <- ks.test(dist,
rlnorm(
n = length(dist),
meanlog = est$estimate[1],
sdlog = est$estimate[2]
))
p.temp[cell] <- test$p.value
} else {
p.temp[cell] <- 0
}
}
pvals[[mir]] <- p.temp
pos <- which(names(dis) == mir)
if (pos %% 1000 == 1)
message(pos)
}
saveRDS(pvals, "data/pvals_per_cell_ks_list_mir.rds")
} else {
pvals <- readRDS("data/pvals_per_cell_ks_list_mir.rds")
}
pvals_df <- plyr::ldply(pvals)
rownames(pvals_df) <- pvals_df$.id
pvals_df$.id <- NULL
head(pvals_df)
pvals_df_bin <- data.frame(apply(pvals_df, 2, function(x) x>=.01)) #presence absence defined by ks test pvalue threshold
head(pvals_df_bin)
pvals_df_num <- data.frame(apply(pvals_df_bin, 2, as.numeric))
rownames(pvals_df_num) <- rownames(pvals_df_bin)
cell_types
cell_types.name <- c("monocyte", "neutrophil", "B-cell", "erythrocyte", "T-helper",
"NK-cell", "T-toxic", "exosome", "serum", "whole.blood")
colnames(pvals_df_num) <- cell_types.name
mean(rowMeans(pvals_df_num)==0)
pvals_df_num <- pvals_df_num[rowMeans(pvals_df_num) != 0,]
dim(pvals_df_num)
set.seed(1234)
method <- "ward.D"
n <- 8
dev.off()
p <- pheatmap(
as.matrix(pvals_df_num),
color = colorRampPalette(brewer.pal(n = 3, name = "RdYlBu"))(2),
clustering_method = method,
legend = F,
show_rownames = F,
cutree_rows = n,
# filename = paste0("img/heatmaps/", method, "-", n, ".pdf"),
main = paste0(method, "-", n)
)
clust <- data.frame(cutree(as.hclust(p$tree_row), n))
colnames(clust) <- "cluster"
clust$cluster <- factor(clust$cluster)
pheatmap(as.matrix(pvals_df_num),
color = colorRampPalette(brewer.pal(n = 3, name = "RdYlBu"))(2),
annotation_colors = list(brewer.pal(n, "Dark2")),
clustering_method = method,
legend = T,
show_rownames = F,
annotation_row = clust,
cutree_rows = n)
levels(clust$cluster) <- c("immune-neutro-whole", "ubi", "immune-neutro-whole-checker", "ubi-checker", "immune", "mono", "ubi-checker-less", "whole-blood")
pheatmap(as.matrix(pvals_df_num),
color = colorRampPalette(brewer.pal(n = 3, name = "RdYlBu"))(2),
annotation_colors = list(brewer.pal(n, "Dark2")),
clustering_method = method,
legend = T,
show_rownames = F,
annotation_row = clust,
cutree_rows = n,
filename = "img/mir_heatmap_cell_type.pdf"); dev.off()
deseq <- read.csv("out/DESeq2_smrna_stroke_vs_con.csv")
tsne_mir <- Rtsne(as.matrix(pvals_df_num), check_duplicates = F, perplexity = 50)
tsne_mir_plot <- data.frame(tsne_mir$Y)
colnames(tsne_mir_plot) <- c("x", "y")
rownames(tsne_mir_plot) <- rownames(pvals_df_num)
tsne_mir_plot$shape <- factor(rownames(tsne_mir_plot) %in% deseq$name)
tsne_mir_plot$countChange <- abs(deseq$countChange[match(rownames(tsne_mir_plot), deseq$name)])
tsne_mir_plot$log_cc <- log10(tsne_mir_plot$countChange+2)
col <- clust$cluster[match(rownames(pvals_df_num), rownames(clust))]
tsne_mir_plot$ward.D_8 <- factor(col)
ggplot(tsne_mir_plot, aes(x, y, col = ward.D_8)) + geom_point(size = 1) +
scale_color_brewer(palette = "Dark2") + theme_minimal()
ggsave("img/tsne_mir.svg", width = 8, height = 5)
ggplot(tsne_mir_plot, aes(x, y)) + geom_point(size = 1, col = "grey80") +
theme_minimal() +
geom_point(aes(x, y, col = ward.D_8, size = log_cc), data =
tsne_mir_plot[tsne_mir_plot$shape == T,]) +
scale_color_brewer(palette = "Dark2") +
scale_size_continuous(breaks = 1:8, labels = 10^(1:8), name = "count change", range = c(.4, 3))
ggsave("img/tsne_mir_DE.svg", width = 8, height = 5)
mir_counts <- read.csv("out/cholinomiR_counts.csv")
tsne_mir_plot$name <- rownames(tsne_mir_plot)
ggplot(tsne_mir_plot, aes(x, y)) + geom_point(size = 1, col = "grey80") +
theme_minimal() +
geom_point(aes(x, y, col = ward.D_8, size = log_cc), data =
tsne_mir_plot[rownames(tsne_mir_plot) %in% mir_counts$m.name[mir_counts$n>4],]) +
geom_text_repel(aes(x, y, label = name, size = log_cc), data = tsne_mir_plot[rownames(tsne_mir_plot) %in% mir_counts$m.name[mir_counts$n>4],]) +
scale_color_brewer(palette = "Dark2") +
scale_size_continuous(breaks = 1:4, labels = 10^(1:4), name = "count change", range = c(.4, 3))
ggsave("img/tsne_mir_cholino.svg", width = 8, height = 5)
setwd("~/GitHub/stroke-trf")
rm(list = ls())
library(Rtsne)
library(reshape2)
library(RColorBrewer)
options(stringsAsFactors = F)
cholinergic_genes <- readRDS("data/cholinergic_genes.rds")
tissues <- c("CD4POS_T_CELLS", "CD8POS_T_CELLS", "CD14POS_MONOCYTES", "NATURAL_KILLER_CELLS", "NEUTROPHILS", "CD19POS_B_CELLS", "WHOLE_BLOOD")
files <- paste0("data/", list.files("data/"))
ch_exp <- cholinergic_genes
allgenes <- character()
for(tis in tissues){
idx <- which(tissues == tis)
message(idx)
file <- files[grep(tis, files)]
tar <- readRDS(file)
tar_sum <- aggregate(tar$r.tfa, by = list(g.name = tar$g.name, g.ensg = tar$g.ensg), "sum")
tar_sum <- tidyr::separate_rows(tar_sum, g.ensg, sep = ", ")
#cholinergic
col <- tar_sum$x[match(ch_exp$ensg, tar_sum$g.ensg)]
col[is.na(col)] <- 0
ch_exp <- cbind(ch_exp, col)
colnames(ch_exp)[idx+4] <- tis
#prepare complete
allgenes <- unique(c(allgenes, tar_sum$g.ensg))
}
head(ch_exp)
all_exp <- data.frame(ensg = allgenes)
all_exp$name <- NA
for(tis in tissues){
idx <- which(tissues == tis)
message(idx)
file <- files[grep(tis, files)]
tar <- readRDS(file)
tar_sum <- aggregate(tar$r.tfa, by = list(g.name = tar$g.name, g.ensg = tar$g.ensg), "sum")
tar_sum <- tidyr::separate_rows(tar_sum, g.ensg, sep = ", ")
#cholinergic
col <- tar_sum$x[match(all_exp$ensg, tar_sum$g.ensg)]
col[is.na(col)] <- 0
all_exp <- cbind(all_exp, col)
namidx <- which(all_exp$ensg %in% tar_sum$g.ensg)
all_exp$name[namidx] <- tar_sum$g.name[match(all_exp$ensg[namidx], tar_sum$g.ensg)]
colnames(all_exp)[idx+2] <- tis
#prepare complete
allgenes <- unique(c(allgenes, tar_sum$g.ensg))
}
head(all_exp)
nrow(all_exp)
which(rowMeans(all_exp[3:ncol(all_exp)]) == 0)
tissues
datExp <- all_exp[, 3:ncol(all_exp)]
dim(datExp)
rownames(datExp) <- all_exp$ensg
datExp0 <- datExp#[1:2000,]
head(datExp0)
tsne_tf <-
Rtsne(as.matrix(datExp0),
check_duplicates = F,
perplexity = 43)
tsne_tf_plot <- data.frame(tsne_tf$Y)
colnames(tsne_tf_plot) <- c("x", "y")
rownames(tsne_tf_plot) <- rownames(datExp0)
tsne_tf_plot$name <- rownames(datExp0)
tsne_tf_plot$name[tsne_tf_plot$name %in% cholinergic_genes$ensg] <-
cholinergic_genes$gene_symbol[match(tsne_tf_plot$name[tsne_tf_plot$name %in% cholinergic_genes$ensg], cholinergic_genes$ensg)]
find.max <- function(row) {
return(names(row)[which.max(row)])
}
tsne_tf_plot$cluster <- apply(datExp0, 1, find.max)
ggplot(tsne_tf_plot, aes(x, y, col = cluster)) + geom_point(size = 2) +
theme_minimal()
ggsave(paste0("img/stat/tsne_tfs_all.pdf"))
ggplot(tsne_tf_plot, aes(x, y)) + geom_point(size = 2, col = "grey80") +
geom_point(aes(x, y, col = cluster), data = tsne_tf_plot[tsne_tf_plot$name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]) +
geom_text(aes(x, y, label = name), data = tsne_tf_plot[tsne_tf_plot$name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]) +
theme_minimal()
ggsave(paste0("img/stat/tsne_tfs_cholinergic.pdf"))
library(ggplot2)
ggplot(tsne_tf_plot, aes(x, y)) + geom_point(size = 2, col = "grey80") +
geom_point(aes(x, y, col = cluster), data = tsne_tf_plot[tsne_tf_plot$name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]) +
geom_text(aes(x, y, label = name), data = tsne_tf_plot[tsne_tf_plot$name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]) +
theme_minimal()
ggplot(tsne_tf_plot, aes(x, y, col = cluster)) + geom_point(size = 2) +
theme_minimal()
ggsave(paste0("img/stat/tsne_tfs_all.pdf"))
ggsave(paste0("img/tsne_tfs_all.pdf"))
ggplot(tsne_tf_plot, aes(x, y)) + geom_point(size = 2, col = "grey80") +
geom_point(aes(x, y, col = cluster), data = tsne_tf_plot[tsne_tf_plot$name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]) +
geom_text(aes(x, y, label = name), data = tsne_tf_plot[tsne_tf_plot$name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]) +
theme_minimal()
ggsave(paste0("img/tsne_tfs_cholinergic.pdf"))
datExp0 <- datExp[,colnames(datExp) != "WHOLE_BLOOD"]
datExp0 <- datExp0[which(rowMeans(datExp0) > 0), ]
dim(datExp0)
set.seed(1)
tsne_tf <-
Rtsne(as.matrix(datExp0),
check_duplicates = F,
perplexity = 44)
tsne_tf_plot <- data.frame(tsne_tf$Y)
colnames(tsne_tf_plot) <- c("x", "y")
rownames(tsne_tf_plot) <- rownames(datExp0)
tsne_tf_plot$name <- rownames(datExp0)
tsne_tf_plot$name[tsne_tf_plot$name %in% cholinergic_genes$ensg] <-
cholinergic_genes$gene_symbol[match(tsne_tf_plot$name[tsne_tf_plot$name %in% cholinergic_genes$ensg], cholinergic_genes$ensg)]
find.max <- function(row) {
return(names(row)[which.max(row)])
}
tsne_tf_plot$cluster <- apply(datExp0, 1, find.max)
ggplot(tsne_tf_plot, aes(x, y, col = cluster)) + geom_point(size = 1) +
theme_minimal()
ggsave(
paste0("img/stat/perm/tsne_tfs_all_no_whole.svg"),
width = 12,
height = 10
)
ggplot(tsne_tf_plot, aes(x, y)) + geom_point(size = 1, col = "grey80") +
geom_point(aes(x, y, col = cluster, size = 3), data = tsne_tf_plot[tsne_tf_plot$name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]) +
geom_text(aes(x, y, label = name), data = tsne_tf_plot[tsne_tf_plot$name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]) +
theme_minimal()
ggplot(tsne_tf_plot, aes(x, y, col = cluster)) + geom_point(size = 1) +
theme_minimal()
ggsave(
paste0("img/tsne_tfs_all_no_whole.svg"),
width = 12,
height = 10
)
ggplot(tsne_tf_plot, aes(x, y)) + geom_point(size = 1, col = "grey80") +
geom_point(aes(x, y, col = cluster, size = 3), data = tsne_tf_plot[tsne_tf_plot$name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]) +
geom_text(aes(x, y, label = name), data = tsne_tf_plot[tsne_tf_plot$name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]) +
theme_minimal()
ggsave(paste0("img/tsne_tfs_cholinergic_no_whole.svg"), width = 12, height = 10)
