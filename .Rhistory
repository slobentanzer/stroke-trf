install.packages("BiocManager")
install.packages("ggplot2")
install.packages("svglite")
BiocManager::install(c("DESeq2", "Biostrings", "apeglm", "BiocParallel"))
BiocManager::install("DESeq2")
BiocManager::install("genefilter")
BiocManager::install("genefilter")
BiocManager::install("DESeq2")
install.packages("pacman")
setwd("~/GitHub/stroke-trf")
rm(list = ls())
library(ggplot2)
lnames <- load("data/CD14_TF_miR_tRF_network.RData")
lnames
#BAR GRAPH OF TFs TARGETING MIR vs TRF FRACTIONS####
find.fraction <- function(id){
if(id %in% edges$target) {
temp <- edges[edges$target == id, ]
temp$biotype <- nodes$biotype[match(temp$source, nodes$id)]
return(mean(temp$biotype == "tRF"))
} else {
return(2)
}
}
nodes$tRF_fraction <- unlist(lapply(nodes$id, find.fraction))
nodes[nodes$biotype == "TF_top18",]
fnodes <- nodes[!is.na(nodes$tRF_fraction),]
fnodes <- fnodes[grep("TF", fnodes$biotype),]
fnodes <- fnodes[!is.na(fnodes$cc),]
fnodes <- fnodes[order(abs(fnodes$cc), decreasing = T),]
fnodes$tRF_fraction <- fnodes$tRF_fraction - .5
fnodes$log_cc <- log2(abs(fnodes$cc) + 1)
nrow(fnodes)
#>cholinergic TFs?####
cholinergic_tfs <- readRDS("data/cholinergic_tfs.rds")
cholinergic_genes <- readRDS("data/cholinergic_genes.rds")
cholinergic_tfs <- cholinergic_tfs[cholinergic_tfs$tissue == "CD14POS_MONOCYTES",]
cholinergic_tfs <- cholinergic_tfs[cholinergic_tfs$g.name %in% cholinergic_genes$gene_symbol[cholinergic_genes$group %in% c("core", "receptor")],]
unique(cholinergic_tfs$tf.name[cholinergic_tfs$g.name == "SLC18A3"])
fnodes$label %in% cholinergic_tfs$tf.name
fnodes$cholinergic <- fnodes$label %in% cholinergic_tfs$tf.name
table(fnodes$cholinergic)
fnodes <- fnodes[order(fnodes$log_cc),]
fnodes <- fnodes[order(fnodes$tRF_fraction),]
fnodes$label <- factor(fnodes$label, levels = unique(fnodes$label))
#>>display all targeted tfs####
nrow(fnodes[fnodes$tRF_fraction<1.5,])
ggplot(fnodes[fnodes$tRF_fraction<1.5,], aes(label, tRF_fraction, fill = tRF_fraction)) +
geom_bar(stat = "identity") +
scale_fill_viridis_c() +
coord_flip() + #ggtitle(paste0("tRF fraction of top TFs")) +
ylab("tRF fraction - 0.5") + xlab("TF name") +
theme_minimal()
ggsave("img/TF_trf_fraction_all_bar.svg", width = 8, height = 5)
#handle non-targeted TFs
fnodes$targeted <- fnodes$tRF_fraction<1
table(fnodes$targeted)
table(fnodes$tRF_fraction[fnodes$targeted] == .5) #only trfs
table(fnodes$tRF_fraction[fnodes$targeted] == -.5) #only mirs
fnodes$tRF_fraction[!fnodes$targeted] <- fnodes$tRF_fraction[!fnodes$targeted] - 1.5
fnodes <- fnodes[order(fnodes$targeted, fnodes$tRF_fraction),]
fnodes$label <- factor(fnodes$label, levels = unique(fnodes$label))
fnodes1 <- fnodes[fnodes$padj < .1,]
ggplot(fnodes1, aes(label, tRF_fraction, col = cc>0, size = log_cc)) +
geom_point(stat = "identity") +
scale_color_discrete(name = "up-regulated") +
scale_size(range = c(1,7), name = "count change", breaks = fivenum(fnodes1$log_cc[1:20]),
limits = c(min(fnodes1$log_cc[1:20]), max(fnodes1$log_cc[1:20])),
labels = round(2^fivenum(fnodes1$log_cc[1:20]), 0)) +
geom_text(aes(fnodes1$label[which(fnodes1$label[1:20] %in% cholinergic_tfs$tf.name)],
fnodes1$tRF_fraction[which(fnodes1$label[1:20] %in% cholinergic_tfs$tf.name)]),
label = "c", position = "identity",
data = fnodes1[which(fnodes1$label[1:20] %in% cholinergic_tfs$tf.name),],
col = "black") +
coord_flip() + #ggtitle(paste0("tRF fraction of top TFs")) +
ylab("tRF fraction - 0.5") + xlab("TF name") +
scale_y_continuous(limits = c(-.6,.6), breaks = c(-.5,-.25,0,.25,.5)) +
theme_minimal()
ggsave("img/TF_tRF_fraction_top26_alpha0.1.svg", width = 4, height = 8)
fnodes0 <- fnodes[fnodes$padj < .05,]
nrow(fnodes0)
ggplot(fnodes0, aes(label, tRF_fraction, col = cc>0, size = log_cc)) +
geom_point(stat = "identity") +
scale_color_discrete(name = "up-regulated") +
scale_size(range = c(3,10), name = "count change", breaks = fivenum(fnodes0$log_cc[1:20]),
limits = c(min(fnodes0$log_cc[1:20]), max(fnodes0$log_cc[1:20])),
labels = round(2^fivenum(fnodes0$log_cc[1:20]), 0)) +
geom_text(aes(fnodes0$label[which(fnodes0$label %in% cholinergic_tfs$tf.name)],
fnodes0$tRF_fraction[which(fnodes0$label %in% cholinergic_tfs$tf.name)]),
label = "c", position = "identity",
data = fnodes0[which(fnodes0$label %in% cholinergic_tfs$tf.name),],
col = "black") +
coord_flip() + #ggtitle(paste0("tRF fraction of top TFs")) +
ylab("tRF fraction - 0.5") + xlab("TF name") +
scale_y_continuous(limits = c(-.6,.6), breaks = c(-.5,-.25,0,.25,.5)) +
theme_minimal()
ggsave("img/TF_tRF_fraction_top18_alpha0.05.svg", width = 4, height = 8)
setwd("~/GitHub/stroke-trf")
rm(list = ls())
pacman::p_load(DESeq2, apeglm)
options(stringsAsFactors = F)
get.count.change <- function(BM, LF) {
return((BM * 2^LF) - BM)
}
remove.char <- function(str, n) {
return(substr(str, n+1, nchar(str)))
}
# DIFFERENTIAL EXPRESSION OF LARGE RNAs ####
#load data
lnames<- load(file = "data/wgcna_input_gene.RData");
lnames
#compile metadata
sample.table <- traitData[, c("disease.state", "age", "batch", "sample_id", "mir_filename")]
meta <- read.csv("data/raw/meta.csv", sep = ";", dec = ",")
sample.table$time2blood <- meta$time2blood[match(sample.table$mir_filename, meta$FileName)]
#factorization binning of continuous variables
sample.table$age <- cut(sample.table$age, 5)
sample.table$time2blood <- cut(sample.table$time2blood, 5)
set.seed(1)
sample.table$time2blood[is.na(sample.table$time2blood)] <- sample(sample.table$time2blood[!is.na(sample.table$time2blood)],
length(sample.table$time2blood[is.na(sample.table$time2blood)]))
#gene DESeq####
counts <- read.csv("data/raw/mrna_salmon_counts.csv", row.names = 1, check.names = F)
head(counts)
## >sample table ####
dim(counts)
dim(sample.table)
colnames(counts) == rownames(sample.table)
all(colnames(counts) %in% rownames(sample.table))
counts <- counts[, rownames(sample.table)]
## >DESeq ####
se <- SummarizedExperiment(as.matrix(round(counts, 0)),
colData = sample.table)
ddsSE <- DESeqDataSet(se, design = ~ age + batch + disease.state)
ddsSE
#>DESeq run ####
dds <- estimateSizeFactors(ddsSE)
dds <- estimateDispersions(dds)
dds <- nbinomWaldTest(dds, maxit=500)
resultsNames(dds)
#stroke vs control
stroke <- lfcShrink(dds, coef = c("disease.state_stroke_vs_control"), type = "apeglm")
plotMA(stroke)
summary(stroke)
ensg2symbol <- readRDS(file = "data/ensg2symbol_all.rds")
stroke$symbol <- ensg2symbol$hgnc_symbol[match(rownames(stroke), ensg2symbol$ensembl_gene_id)]
stroke$countChange <- get.count.change(stroke$baseMean, stroke$log2FoldChange)
stroke$ensg <- rownames(stroke)
stroke <- stroke[order(stroke$padj),]
stroke <- stroke[!is.na(stroke$padj),]
stroke
write.csv(stroke, file = "out/DESeq2_gene_stroke_vs_con.csv",
row.names = F, quote = F)
strokeSig <- subset(stroke, padj < .05)
#names
strokeSig$ensg <- rownames(strokeSig)
strokeSig$countChange <- get.count.change(strokeSig$baseMean, strokeSig$log2FoldChange)
(strokeSig <- strokeSig[order(strokeSig$padj, decreasing = F),])
(strokeSig <- strokeSig[order(abs(strokeSig$countChange), decreasing = T),])
as.data.frame(strokeSig)
nrow(strokeSig) #number DE
nrow(strokeSig[strokeSig$log2FoldChange>0,])
nrow(strokeSig[strokeSig$log2FoldChange<0,])
nrow(strokeSig[strokeSig$log2FoldChange>1.4,])
nrow(strokeSig[strokeSig$log2FoldChange<(-1.4),])
#plot####
dev.off()
par(mar=c(5,5,5,5), cex=1.0, cex.main=1.4, cex.axis=1.4, cex.lab=1.4)
hist(stroke$log2FoldChange, xlim = c(-1,1), breaks = 1000)
topT <- as.data.frame(stroke)
#Adjusted P values (FDR Q values)
with(topT, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", #col = color,
cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value)))
with(subset(topT, padj<0.05 & abs(log2FoldChange)>1.4), text(log2FoldChange, -log10(padj), labels=subset(topT$symbol, topT$padj<0.05 & abs(topT$log2FoldChange)>1.4), cex=0.8, pos=3))
#Add lines for absolute FC>2 and P-value cut-off at FDR Q<0.05
abline(v=0, col="black", lty=3, lwd=1.0)
abline(v=-1.4, col="black", lty=4, lwd=2.0)
abline(v=1.4, col="black", lty=4, lwd=2.0)
abline(h=-log10(.05), col="black", lty=4, lwd=2.0)
#GO ANALYSIS####
library(topGO)
pacman::p_load(DESeq2, apeglm, topGO)
BiocManager::install("topGO")
pacman::p_load(DESeq2, apeglm, topGO)
#GO ANALYSIS####
geneID2GO <- readRDS(file = "data/geneID2GO_genes.rds")
#>order by pval####
stroke <- stroke[!is.na(stroke$padj),]
#>>all####
genes <- stroke[order(stroke$padj),]
#ontology
ontology <- "BP"
#description
description <- "top genes DE in stroke"
#allGenes list
allGenes <- genes$padj[1:2000]
names(allGenes) <- genes$ensg[1:2000]
#geneSelection function
hist(allGenes)
quantile(allGenes, seq(0,1,.01))
topGenes <- function(allScore) {
return(allScore < .05)
}
#prune GO terms
nodeSize <- 10
GOdata <- new("topGOdata",
description = description,
ontology = ontology,
allGenes = allGenes,
geneSel = topGenes,
annot = annFUN.gene2GO,
nodeSize = nodeSize,
gene2GO = geneID2GO)
## >fisher test ###
test.stat <- new("classicCount", testStatistic = GOFisherTest, name = "Fisher test")
resultFisher <- getSigGroups(GOdata, test.stat)
resultFisher
# >weight test ###
test.stat <- new("weightCount", testStatistic = GOFisherTest, name = "Fisher test", sigRatio = "ratio")
resultWeight <- getSigGroups(GOdata, test.stat)
## >total ###
allRes <- GenTable(GOdata, classic = resultFisher,
weight = resultWeight,
orderBy = "weight", ranksOf = "classic", topNodes = 100)
(sig <- allRes[allRes$weight<.05,])
write.csv(sig, file = "out/gene_GO_significant_all.csv")
setwd("~/GitHub/stroke-trf")
rm(list = ls())
pacman::p_load(pheatmap,
fitdistrplus,
DESeq2,
ggplot2,
Rtsne,
RColorBrewer,
ggrepel)
options(stringsAsFactors = FALSE);
#Read in
meta <- read.csv("data/raw/juzenas_sample_meta.csv", sep = ",", row.names = 1)
meta$cells <- factor(meta$cells)
head(meta)
rownames(meta) <- meta$file
meta$batch <- factor(meta$batch)
counts <- read.csv("data/raw/miRNA_reads_miRExpress_juzenas.csv", sep = ",", row.names = 1)
head(counts)
nrow(counts)
mean(rowMeans(counts) == 0)
mean(colMeans(counts) == 0)
counts <- counts[,colMeans(counts) != 0]
meta <- meta[match(colnames(counts), meta$file),]
#deseq normalize VST
se <- SummarizedExperiment(as.matrix(counts),
colData = meta)
dds <- DESeqDataSet(se, design = ~ cells)
cts <- counts(dds)
geoMeans <- apply(cts, 1, function(row) if (all(row == 0)) 0 else exp(sum(log(row[row != 0]))/length(row)))
dds <- estimateSizeFactors(dds, geoMeans=geoMeans)
#FORMALIZE THE DEFINITION OF PRESENCE/ABSENCE####
#collect counts per cell type in a list
if(!file.exists("data/counts_per_cell_list_mir.rds")){
dis <- vector(mode = "list", length = nrow(cts))
names(dis) <- rownames(cts)
for (mir in rownames(counts)) {
row <- counts[mir,]
expr <- logical()
lis <- vector(mode = "list", length = length(unique(meta$cells)))
names(lis) <- unique(meta$cells)
for (cell in unique(meta$cells)) {
lis[[cell]] <- as.numeric(row[meta$file[meta$cells == cell]])
}
dis[[mir]] <- lis
}
saveRDS(dis, "data/counts_per_cell_list_mir.rds")
} else {
dis <- readRDS("data/counts_per_cell_list_mir.rds")
}
#>implement statistical test####
cell_types <- levels(meta$cells)
#kolmogorov-smirnov over log-normal distribution of counts with estimated mean and sd
if(!file.exists("data/pvals_per_cell_ks_list_mir.rds")){
pvals <- vector(mode = "list", length = length(dis))
names(pvals) <- names(dis)
for(mir in names(dis)) {
p.temp <- vector(mode = "numeric", length = length(cell_types))
names(p.temp) <- cell_types
for (cell in cell_types) {
dist <- dis[[mir]][[cell]]
if (!mean(dist) == 0) {
est <- fitdist((dist + 1), "lnorm", method = "mle")
test <- ks.test(dist,
rlnorm(
n = length(dist),
meanlog = est$estimate[1],
sdlog = est$estimate[2]
))
p.temp[cell] <- test$p.value
} else {
p.temp[cell] <- 0
}
}
pvals[[mir]] <- p.temp
pos <- which(names(dis) == mir)
if (pos %% 1000 == 1)
message(pos)
}
saveRDS(pvals, "data/pvals_per_cell_ks_list_mir.rds")
} else {
pvals <- readRDS("data/pvals_per_cell_ks_list_mir.rds")
}
pvals_df <- plyr::ldply(pvals)
rownames(pvals_df) <- pvals_df$.id
pvals_df$.id <- NULL
head(pvals_df)
pvals_df_bin <- data.frame(apply(pvals_df, 2, function(x) x>=.01)) #presence absence defined by ks test pvalue threshold
head(pvals_df_bin)
pvals_df_num <- data.frame(apply(pvals_df_bin, 2, as.numeric))
rownames(pvals_df_num) <- rownames(pvals_df_bin)
cell_types
cell_types.name <- c("monocyte", "neutrophil", "B-cell", "erythrocyte", "T-helper",
"NK-cell", "T-toxic", "exosome", "serum", "whole.blood")
colnames(pvals_df_num) <- cell_types.name
mean(rowMeans(pvals_df_num)==0)
pvals_df_num <- pvals_df_num[rowMeans(pvals_df_num) != 0,]
dim(pvals_df_num)
# ward.D 8
set.seed(1234)
method <- "ward.D"
n <- 8
dev.off()
p <- pheatmap(
as.matrix(pvals_df_num),
color = colorRampPalette(brewer.pal(n = 3, name = "RdYlBu"))(2),
clustering_method = method,
legend = F,
show_rownames = F,
cutree_rows = n,
# filename = paste0("img/heatmaps/", method, "-", n, ".pdf"),
main = paste0(method, "-", n)
)
clust <- data.frame(cutree(as.hclust(p$tree_row), n))
colnames(clust) <- "cluster"
clust$cluster <- factor(clust$cluster)
pheatmap(as.matrix(pvals_df_num),
color = colorRampPalette(brewer.pal(n = 3, name = "RdYlBu"))(2),
annotation_colors = list(brewer.pal(n, "Dark2")),
clustering_method = method,
legend = T,
show_rownames = F,
annotation_row = clust,
cutree_rows = n)
#clusters:
# 1 immune-neutro-whole
# 2 ubi
# 3 immune-neutro-whole-checker
# 4 ubi-checker
# 5 immune
# 6 mono
# 7 ubi-checker-less
# 8 whole-blood
levels(clust$cluster) <- c("immune-neutro-whole", "ubi", "immune-neutro-whole-checker", "ubi-checker", "immune", "mono", "ubi-checker-less", "whole-blood")
pheatmap(as.matrix(pvals_df_num),
color = colorRampPalette(brewer.pal(n = 3, name = "RdYlBu"))(2),
annotation_colors = list(brewer.pal(n, "Dark2")),
clustering_method = method,
legend = T,
show_rownames = F,
annotation_row = clust,
cutree_rows = n,
filename = "img/mir_heatmap_cell_type.pdf"); dev.off()
#t-SNE of PRESENCE/ABSENCE####
deseq <- read.csv("out/DESeq2_smrna_stroke_vs_con.csv")
#>cluster from pheatmap####
tsne_mir <- Rtsne(as.matrix(pvals_df_num), check_duplicates = F, perplexity = 50)
tsne_mir_plot <- data.frame(tsne_mir$Y)
colnames(tsne_mir_plot) <- c("x", "y")
rownames(tsne_mir_plot) <- rownames(pvals_df_num)
tsne_mir_plot$shape <- factor(rownames(tsne_mir_plot) %in% deseq$name)
tsne_mir_plot$countChange <- abs(deseq$countChange[match(rownames(tsne_mir_plot), deseq$name)])
tsne_mir_plot$log_cc <- log10(tsne_mir_plot$countChange+2)
#>>ward.D_8####
col <- clust$cluster[match(rownames(pvals_df_num), rownames(clust))]
tsne_mir_plot$ward.D_8 <- factor(col)
#complete
ggplot(tsne_mir_plot, aes(x, y, col = ward.D_8)) + geom_point(size = 1) +
scale_color_brewer(palette = "Dark2") + theme_minimal()
# geom_point(aes(x, y), col = "white", pch = 4, data =
#              tsne_mir_plot[tsne_mir_plot$shape == T & !rownames(tsne_mir_plot) %in% top20,]) +
# geom_point(aes(x, y), col = "black", pch = 4, data = tsne_mir_plot[rownames(tsne_mir_plot) %in% top20,])
ggsave("img/tsne_mir.svg", width = 8, height = 5)
#de
ggplot(tsne_mir_plot, aes(x, y)) + geom_point(size = 1, col = "grey80") +
theme_minimal() +
geom_point(aes(x, y, col = ward.D_8, size = log_cc), data =
tsne_mir_plot[tsne_mir_plot$shape == T,]) +
scale_color_brewer(palette = "Dark2") +
scale_size_continuous(breaks = 1:8, labels = 10^(1:8), name = "count change", range = c(.4, 3))
ggsave("img/tsne_mir_DE.svg", width = 8, height = 5)
#cholinergic
mir_counts <- read.csv("out/cholinomiR_counts.csv")
tsne_mir_plot$name <- rownames(tsne_mir_plot)
ggplot(tsne_mir_plot, aes(x, y)) + geom_point(size = 1, col = "grey80") +
theme_minimal() +
geom_point(aes(x, y, col = ward.D_8, size = log_cc), data =
tsne_mir_plot[rownames(tsne_mir_plot) %in% mir_counts$m.name[mir_counts$n>4],]) +
geom_text_repel(aes(x, y, label = name, size = log_cc), data = tsne_mir_plot[rownames(tsne_mir_plot) %in% mir_counts$m.name[mir_counts$n>4],]) +
scale_color_brewer(palette = "Dark2") +
scale_size_continuous(breaks = 1:4, labels = 10^(1:4), name = "count change", range = c(.4, 3))
ggsave("img/tsne_mir_cholino.svg", width = 8, height = 5)
pacman::p_load(Rtsne,
reshape2,
RColorBrewer,
ggplot2)
options(stringsAsFactors = F)
cholinergic_genes <- readRDS("data/cholinergic_genes.rds")
#tissues from marbach et al that are equivalent to juzenas et al tissues
tissues <- c("CD4POS_T_CELLS", "CD8POS_T_CELLS", "CD14POS_MONOCYTES", "NATURAL_KILLER_CELLS", "NEUTROPHILS", "CD19POS_B_CELLS", "WHOLE_BLOOD")
# table with cholinergic expression in each tissue####
# tissue files have been transformed from raw marbach et al 2016 data into .rds format
# expression is calculated by summation of transcription factor activity towards each gene per tissue
files <- paste0("data/", list.files("data/"))
ch_exp <- cholinergic_genes
allgenes <- character()
for(tis in tissues){
idx <- which(tissues == tis)
message(idx)
file <- files[grep(tis, files)]
tar <- readRDS(file)
tar_sum <- aggregate(tar$r.tfa, by = list(g.name = tar$g.name, g.ensg = tar$g.ensg), "sum")
tar_sum <- tidyr::separate_rows(tar_sum, g.ensg, sep = ", ")
#cholinergic
col <- tar_sum$x[match(ch_exp$ensg, tar_sum$g.ensg)]
col[is.na(col)] <- 0
ch_exp <- cbind(ch_exp, col)
colnames(ch_exp)[idx+4] <- tis
#prepare complete
allgenes <- unique(c(allgenes, tar_sum$g.ensg))
}
head(ch_exp)
all_exp <- data.frame(ensg = allgenes)
all_exp$name <- NA
for(tis in tissues){
idx <- which(tissues == tis)
message(idx)
file <- files[grep(tis, files)]
tar <- readRDS(file)
tar_sum <- aggregate(tar$r.tfa, by = list(g.name = tar$g.name, g.ensg = tar$g.ensg), "sum")
tar_sum <- tidyr::separate_rows(tar_sum, g.ensg, sep = ", ")
#cholinergic
col <- tar_sum$x[match(all_exp$ensg, tar_sum$g.ensg)]
col[is.na(col)] <- 0
all_exp <- cbind(all_exp, col)
namidx <- which(all_exp$ensg %in% tar_sum$g.ensg)
all_exp$name[namidx] <- tar_sum$g.name[match(all_exp$ensg[namidx], tar_sum$g.ensg)]
colnames(all_exp)[idx+2] <- tis
#prepare complete
allgenes <- unique(c(allgenes, tar_sum$g.ensg))
}
head(all_exp)
nrow(all_exp)
#t-SNE of expression####
which(rowMeans(all_exp[3:ncol(all_exp)]) == 0)
#>tissues akin to juzenas? merge? select?####
tissues
datExp <- all_exp[, 3:ncol(all_exp)]
dim(datExp)
rownames(datExp) <- all_exp$ensg
#color by highest expression (derived from transcriptional activity towards each gene)####
#including whole blood
datExp0 <- datExp#[1:2000,]
head(datExp0)
tsne_tf <-
Rtsne(as.matrix(datExp0),
check_duplicates = F,
perplexity = 43)
tsne_tf_plot <- data.frame(tsne_tf$Y)
colnames(tsne_tf_plot) <- c("x", "y")
rownames(tsne_tf_plot) <- rownames(datExp0)
tsne_tf_plot$name <- rownames(datExp0)
tsne_tf_plot$name[tsne_tf_plot$name %in% cholinergic_genes$ensg] <-
cholinergic_genes$gene_symbol[match(tsne_tf_plot$name[tsne_tf_plot$name %in% cholinergic_genes$ensg], cholinergic_genes$ensg)]
# find shared expression
find.max <- function(row) {
return(names(row)[which.max(row)])
}
tsne_tf_plot$cluster <- apply(datExp0, 1, find.max)
ggplot(tsne_tf_plot, aes(x, y, col = cluster)) + geom_point(size = 2) +
theme_minimal()
